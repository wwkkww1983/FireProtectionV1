<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FireProtectionV1.Common</name>
    </assembly>
    <members>
        <member name="T:FireProtectionV1.Common.DBContext.EntityBase">
            <summary>
            所有实体的父类
            </summary>
        </member>
        <member name="P:FireProtectionV1.Common.DBContext.EntityBase.CreationTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:FireProtectionV1.Common.DBContext.EntityBase.IsDeleted">
            <summary>
            软删除标记
            </summary>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.True``1">
            <summary>
            初始化一个恒为真的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.False``1">
            <summary>
            初始化一个恒为假的表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.IfAnd``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            有条件拼接And
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceExpr">原表达式</param>
            <param name="isAppend">是否需要拼接</param>
            <param name="express">要拼接的表达式</param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.IfOr``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            有条件拼接Or
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceExpr">原表达式</param>
            <param name="isAppend">是否需要拼接</param>
            <param name="express">要拼接的表达式</param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            拼接Or表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1"></param>
            <param name="expr2"></param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            拼接And表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1"></param>
            <param name="expr2"></param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ExprExtension.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression})">
            <summary>
            合并表达式以及参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1"></param>
            <param name="expr2"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:FireProtectionV1.Common.DBContext.ReplaceExpressionVisitor">
            <summary>
            替换表达式的访问器
            </summary>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ISqlExecuter.Execute(System.String,System.Object[])">
            <summary>
            执行给定的命令
            </summary>
            <param name="sql">命令字符串</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>执行命令后由数据库返回的结果</returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ISqlExecuter.SqlQuery``1(System.String,System.Object[])">
            <summary>
            创建一个原始 SQL 查询，该查询将返回给定泛型类型的元素。
            </summary>
            <typeparam name="T">查询所返回对象的类型</typeparam>
            <param name="sql">SQL 查询字符串</param>
            <param name="parameters">要应用于 SQL 查询字符串的参数</param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ISqlRepository.Execute(System.String,System.Object[])">
            <summary>
            执行给定的命令
            </summary>
            <param name="sql">命令字符串</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>执行命令后由数据库返回的结果</returns>
        </member>
        <member name="M:FireProtectionV1.Common.DBContext.ISqlRepository.Query``1(System.String,System.Object[])">
            <summary>
            执行语句返回datatable
            </summary>
            <param name="sql">sql语句</param>
            <param name="parameters">sql参数</param>
            <returns>dataset</returns>
        </member>
        <member name="T:FireProtectionV1.Common.DBContext.StringType">
            <summary>
            字符型字段长度限制
            如果超出Long的范围，则直接用string定义字段类型，不使用此枚举限制
            </summary>
        </member>
        <member name="T:FireProtectionV1.Common.Enum.NormalStatus">
            <summary>
            常用的状态枚举
            </summary>
        </member>
        <member name="F:FireProtectionV1.Common.Enum.NormalStatus.Enabled">
            <summary>
            已启用
            </summary>
        </member>
        <member name="F:FireProtectionV1.Common.Enum.NormalStatus.Disabled">
            <summary>
            已停用
            </summary>
        </member>
        <member name="T:FireProtectionV1.Common.Enum.GatewayStatus">
            <summary>
            网关状态
            </summary>
        </member>
        <member name="F:FireProtectionV1.Common.Enum.GatewayStatus.Unusual">
            <summary>
            异常（表示当前在线但有故障，例如消火栓的水压偏低）
            </summary>
        </member>
        <member name="F:FireProtectionV1.Common.Enum.GatewayStatus.Offline">
            <summary>
            离线
            </summary>
        </member>
        <member name="F:FireProtectionV1.Common.Enum.GatewayStatus.Online">
            <summary>
            在线
            </summary>
        </member>
        <member name="T:FireProtectionV1.Common.Helper.MD5Encrypt">
            <summary>
            不可逆加密
            1 防止被篡改
            2 防止明文存储
            3 防止抵赖，数字签名
            </summary>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.MD5Encrypt.Encrypt(System.String,System.Int32)">
            <summary>
            MD5字符串加密，默认32位加密结果
            </summary>
            <param name="source">待加密字串</param>
            <param name="length">16或32值之一,其它则采用.net默认MD5加密算法</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.MD5Encrypt.AbstractFile(System.String)">
            <summary>
            获取文件的MD5摘要
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.MD5Encrypt.AbstractFile(System.IO.Stream)">
            <summary>
            根据stream获取文件摘要
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:FireProtectionV1.Common.Helper.Valid">
            <summary>
            异常过滤辅助类
            </summary>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.Valid.Exception(System.Boolean,System.String)">
            <summary>
            验证数据，当v值为true时，抛出异常
            </summary>
            <param name="v">判断条件 true 抛出异常</param>
            <param name="message">异常提示信息</param>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.VerifyCodeHelper.CreateNumberVerifyCode(System.Int32)">
            <summary>
            1.数字验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.VerifyCodeHelper.CreateAbcVerifyCode(System.Int32)">
            <summary>
            2.字母验证码
            </summary>
            <param name="length">字符长度</param>
            <returns>验证码字符</returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.VerifyCodeHelper.CreateMixVerifyCode(System.Int32)">
            <summary>
            3.混合验证码
            </summary>
            <param name="length">字符长度</param>
            <returns>验证码字符</returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.VerifyCodeHelper.CreateVerifyCode(FireProtectionV1.Common.Helper.VerifyCodeHelper.VerifyCodeType)">
            <summary>
            产生验证码（随机产生4-6位）
            </summary>
            <param name="type">验证码类型：数字，字符，符合</param>
            <returns></returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.VerifyCodeHelper.CreateBitmapByImgVerifyCode(System.String,System.Int32,System.Int32)">
            <summary>
            验证码图片 => Bitmap
            </summary>
            <param name="verifyCode">验证码</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:FireProtectionV1.Common.Helper.VerifyCodeHelper.CreateByteByImgVerifyCode(System.String,System.Int32,System.Int32)">
            <summary>
            验证码图片 => byte[]
            </summary>
            <param name="verifyCode">验证码</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <returns>byte[]</returns>
        </member>
        <member name="T:FireProtectionV1.Common.Redis.RedisCacheModule">
            <summary>
            AbpRedis缓存注入模块
            </summary>
        </member>
    </members>
</doc>
